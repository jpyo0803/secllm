######## SGX SDK Settings ########

# means, assign value only if it is not already assigned
SGX_ENABLE ?= 1

SGX_SDK ?= /opt/intel/sgxsdk
SGX_MODE ?= HW
SGX_ARCH ?= x64
SGX_DEBUG ?= 0
SGX_PRERELEASE ?= 1

# Common
Common_C_Files := 
Common_Cpp_Files := 
Common_Inc_Dirs := 
Common_C_Flags := 
Common_Cpp_Flags :=
Common_Link_Flags := 

# Untrusted
App_C_Files := 
App_Cpp_Files := App/enclave_bridge.cpp
App_Inc_Dirs := -I. -IApp -I$(SGX_SDK)/include
App_C_Flags := 
App_Cpp_Flags := 
App_Link_Flags := 

# Trusted
Enclave_C_Files :=
Enclave_Cpp_Files := aes_stream.cpp decoder_layer.cpp func_utils.cpp secllm_sgx.cpp 
Enclave_Inc_Dirs := -I. -I/usr/lib/gcc/x86_64-linux-gnu/11/include -IEigen 
Enclave_C_Flags := -fvisibility=hidden -fpie -ffunction-sections -fdata-sections  -DSGX_ENABLE=1
Enclave_Cpp_Flags := -march=native -maes
Enclave_Link_Flags := 

CC_BELOW_4_9 := $(shell expr "`$(CC) -dumpversion`" \< "4.9")
$(Compiler: $(CC))

ifeq ($(CC_BELOW_4_9), 1)
	Enclave_C_Flags += -fstack-protector
else
	Enclave_C_Flags += -fstack-protector-strong
endif

# determine target architecture, either 32 bit or 64 bit
ifeq ($(shell getconf LONG_BIT), 32)
	SGX_ARCH := x86
else ifeq ($(findstring -m32, $(CXXFLAGS)), -m32)
	SGX_ARCH := x86
endif

# set paths according to the target architecture
ifeq ($(SGX_ARCH), x86)
	SGX_COMMON_CFLAGS := -m32
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x86/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x86/sgx_edger8r
else
	SGX_COMMON_CFLAGS := -m64
	SGX_LIBRARY_PATH := $(SGX_SDK)/lib64
	SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x64/sgx_sign
	SGX_EDGER8R := $(SGX_SDK)/bin/x64/sgx_edger8r
endif

ifeq ($(SGX_DEBUG), 1)
ifeq ($(SGX_PRERELEASE), 1)
$(error Cannot set SGX_DEBUG and SGX_PRERELEASE at the same time!!)
endif
endif

# set optimization level
ifeq ($(SGX_DEBUG), 1)
        SGX_COMMON_CFLAGS += -O3 -g
else
        SGX_COMMON_CFLAGS += -O3
endif

######## App Settings ########

# set whether it is simulation or hardware mode
# urts = untrusted runtime system
ifneq ($(SGX_MODE), HW)
	Urts_Library_Name := sgx_urts_sim
else
	Urts_Library_Name := sgx_urts
endif

App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Inc_Dirs)

# Three configuration modes - Debug, prerelease, release
#   Debug - Macro DEBUG enabled.
#   Prerelease - Macro NDEBUG and EDEBUG enabled.
#   Release - Macro NDEBUG enabled.
ifeq ($(SGX_DEBUG), 1)
        App_C_Flags += -DDEBUG -UNDEBUG -UEDEBUG
else ifeq ($(SGX_PRERELEASE), 1)
        App_C_Flags += -DNDEBUG -DEDEBUG -UDEBUG
else
        App_C_Flags += -DNDEBUG -UEDEBUG -UDEBUG
endif

App_Cpp_Flags := $(App_C_Flags) -std=c++17 -shared
App_Link_Flags := $(SGX_COMMON_CFLAGS) -L$(SGX_LIBRARY_PATH) -l$(Urts_Library_Name)

ifneq ($(SGX_MODE), HW)
	App_Link_Flags += -lsgx_uae_service_sim
else
	App_Link_Flags += -lsgx_uae_service
endif

App_Cpp_Objects := $(App_Cpp_Files:.cpp=.so)
App_Name := untrusted_app

######## Enclave Settings ########

ifneq ($(SGX_MODE), HW)
	Trts_Library_Name := sgx_trts_sim
	Service_Library_Name := sgx_tservice_sim
else
	Trts_Library_Name := sgx_trts
	Service_Library_Name := sgx_tservice
endif
Crypto_Library_Name := sgx_tcrypto

Enclave_Cpp_Files := Enclave/Enclave.cpp $(Enclave_Cpp_Files)

Enclave_Inc_Dirs :=  -I$(SGX_SDK)/include $(Common_Inc_Dirs) -IEnclave -I$(SGX_SDK)/include/tlibc -I$(SGX_SDK)/include/libcxx

# ifeq ($(SGX_ENABLE), 0)
# Enclave_Include_Paths += -I/usr/include
# endif


Enclave_C_Flags := $(SGX_COMMON_CFLAGS) $(Enclave_C_Flags) 

Enclave_C_Flags += $(Enclave_Inc_Dirs)
# Enclave_Cpp_Flags := $(Enclave_C_Flags) -std=c++17 -nostdinc++
Enclave_Cpp_Flags := $(Enclave_C_Flags) -std=c++17
Enclave_Cpp_Flags += -march=native -maes

# To generate a proper enclave, it is recommended to follow below guideline to link the trusted libraries:
#    1. Link sgx_trts with the `--whole-archive' and `--no-whole-archive' options,
#       so that the whole content of trts is included in the enclave.
#    2. For other libraries, you just need to pull the required symbols.
#       Use `--start-group' and `--end-group' to link these libraries.
# Do NOT move the libraries linked with `--start-group' and `--end-group' within `--whole-archive' and `--no-whole-archive' options.
# Otherwise, you may get some undesirable errors.
Enclave_Link_Flags := $(SGX_COMMON_CFLAGS) -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles -L$(SGX_LIBRARY_PATH) \
	-Wl,--whole-archive -l$(Trts_Library_Name) -Wl,--no-whole-archive \
	-Wl,--start-group -lsgx_tstdc -lsgx_tcxx -l$(Crypto_Library_Name) -l$(Service_Library_Name) -Wl,--end-group \
	-Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
	-Wl,-pie,-eenclave_entry -Wl,--export-dynamic  \
	-Wl,--defsym,__ImageBase=0 -Wl,--gc-sections   \
	-Wl,--version-script=Enclave/Enclave.lds

Enclave_Cpp_Objects := $(Enclave_Cpp_Files:.cpp=.o) 

Enclave_Name := enclave.so
Signed_Enclave_Name := enclave.signed.so
Enclave_Config_File := Enclave/Enclave.config.xml

ifeq ($(SGX_MODE), HW)
ifeq ($(SGX_DEBUG), 1)
	Build_Mode = HW_DEBUG
else ifeq ($(SGX_PRERELEASE), 1)
	Build_Mode = HW_PRERELEASE
else
	Build_Mode = HW_RELEASE
endif
else
ifeq ($(SGX_DEBUG), 1)
	Build_Mode = SIM_DEBUG
else ifeq ($(SGX_PRERELEASE), 1)
	Build_Mode = SIM_PRERELEASE
else
	Build_Mode = SIM_RELEASE
endif
endif

.PHONY: all run 

ifeq ($(Build_Mode), HW_RELEASE)
all: .config_$(Build_Mode)_$(SGX_ARCH) $(App_Name) $(Enclave_Name) 
	@echo "The project has been built in release hardware mode."
	@echo "Please sign the $(Enclave_Name) first with your signing key before you run the $(App_Name) to launch and access the enclave."
	@echo "To sign the enclave use the command:"
	@echo "   $(SGX_ENCLAVE_SIGNER) sign -key <your key> -enclave $(Enclave_Name) -out <$(Signed_Enclave_Name)> -config $(Enclave_Config_File)"
	@echo "You can also sign the enclave using an external signing tool."
	@echo "To build the project in simulation mode set SGX_MODE=SIM. To build the project in prerelease mode set SGX_PRERELEASE=1 and SGX_MODE=HW."
else
all: .config_$(Build_Mode)_$(SGX_ARCH) $(App_Name) $(Signed_Enclave_Name)
ifeq ($(Build_Mode), HW_DEBUG)
	@echo "The project has been built in debug hardware mode."
else ifeq ($(Build_Mode), SIM_DEBUG)
	@echo "The project has been built in debug simulation mode."
else ifeq ($(Build_Mode), HW_PRERELEASE)
	@echo "The project has been built in pre-release hardware mode."
else ifeq ($(Build_Mode), SIM_PRERELEASE)
	@echo "The project has been built in pre-release simulation mode."
else
	@echo "The project has been built in release simulation mode."
endif
endif

run: all
######## App Objects ########

# Generate proxy calls to ecall and ocall

$(info Print Untrusted 1: $(App_Cpp_Objects))

App/Enclave_u.c: $(SGX_EDGER8R) Enclave/Enclave.edl
	@echo "Generate \'Enclave_u\' " $@
	cd App && $(SGX_EDGER8R) --untrusted ../Enclave/Enclave.edl --search-path ../Enclave --search-path $(SGX_SDK)/include 
	@echo "GEN  =>  $@"
	@echo "\n"

# Compile untrusted app
App/Enclave_u.o: App/Enclave_u.c
	@echo "Build \'Enclave_u object\' " $@
	$(CC) $(App_C_Flags) -c $< -o $@
	@echo "CC   <=  $<"
	@echo "\n"

# Compile bridge
App/enclave_bridge.so: App/enclave_bridge.cpp App/Enclave_u.o
	@echo "Build \'enclave_bridge shared object\' " $@
	$(CXX) $(App_Cpp_Flags) App/enclave_bridge.cpp -o $@ App/Enclave_u.o $(App_Link_Flags)
	@echo "CXX  <=  $<"
	@echo "\n"

App/%.so: App/%.cc App/Enclave_u.o
	@echo "Running 4 " $@
	@echo "App_Cpp_Flags: " $(App_Cpp_Flags)
	$(CXX) $(App_Cpp_Flags) $< -o $@ App/Enclave_u.o $(App_Link_Flags)
	@echo "CXX  <=  $<"
	@echo "\n"

$(App_Name): App/Enclave_u.o App/enclave_bridge.so $(App_Cpp_Objects)
	@echo "Running 5 " $@
	$(CXX) $^ -o $@ $(App_Link_Flags)
	@echo "LINK =>  $@"
	@echo "\n"

.config_$(Build_Mode)_$(SGX_ARCH):
	#rm -f .config_* $(App_Cpp_Objects)
	rm -f .config_* App/enclave_bridge.so 
	@touch .config_$(Build_Mode)_$(SGX_ARCH)
	@echo "\n"

######## Enclave Objects ########

Enclave/Enclave_t.c: $(SGX_EDGER8R) Enclave/Enclave.edl
	@echo "Running 6 " $@
	cd Enclave && $(SGX_EDGER8R) --trusted ../Enclave/Enclave.edl --search-path ../Enclave --search-path $(SGX_SDK)/include
	@echo "GEN  =>  $@"
	@echo "\n"

Enclave/Enclave_t.o: Enclave/Enclave_t.c
	@echo "Running 7 " $@
	$(CC) $(Enclave_C_Flags) -c $< -o $@
	@echo "CC   <=  $<"
	@echo "\n"

%.o: %.cpp
	@echo "Running 8-2 " $@
	$(CXX) $(Enclave_Cpp_Flags) -c $< -o $@
	@echo "CXX  <=  $<"
	@echo "\n"

Enclave/%.o: Enclave/%.cpp
	@echo "Running 8 " $@
	@echo "FLAGS: " $(Enclave_Cpp_Flags)
	@echo "COMMAND: $(CXX) $(Enclave_Cpp_Flags) -c $< -o $@"
	@echo "before"
	$(CXX)  $(Enclave_Cpp_Flags) -c $< -o $@
	@echo "after"
	@echo "\n"

$(Enclave_Name): Enclave/Enclave_t.o $(Enclave_Cpp_Objects)
	@echo "Running 9 " $@
	$(CXX) $^ -o $@ $(Enclave_Link_Flags)
	@echo "\n"

$(Signed_Enclave_Name): $(Enclave_Name)
	@echo "Running 10 " $@
	$(SGX_ENCLAVE_SIGNER) sign -key Enclave/Enclave_private.pem -enclave $(Enclave_Name) -out $@ -config $(Enclave_Config_File)
	@echo "SIGN =>  $@"
	@echo "\n"

.PHONY: clean

clean:
	rm -f .config_* $(Enclave_Name) $(Signed_Enclave_Name) $(App_Cpp_Objects) $(App_CC_Objects) App/Enclave_u.* 
	#echo $(Enclave_Cpp_Objects)
	rm -f $(Enclave_Cpp_Objects) Enclave/Enclave_t.*