/* Enclave.edl - Top EDL file. */

enclave {

    trusted {

    public void ecall_Internal_CreateSecLLM(int hidden_size, int intermediate_size,
                           int max_position_embeddings, int num_attention_heads,
                           int num_hidden_layers, int num_key_value_heads,
                           int enc_key_pool_size);
    
    public void ecall_Internal_Softmax_InPlace([user_check]float* x, int B, int M, int N, int K);

    public void ecall_Internal_Softmax(int fromm, int to_len, [user_check]int* to);

    public void ecall_Internal_SwiGLU_InPlace([user_check]float* gate_in, [user_check]float* up_in, int B, int M, int N);

    public void ecall_Internal_SwiGLU(int from1, int from2, int to_len, [user_check]int* to);

    public void ecall_Internal_RMSNorm_InPlace([user_check]float* x, [user_check]float* weight, int B, int M,
                                int N, float eps);

    public void ecall_Internal_RMSNorm(int layer_idx, int fromm, int to_len, [user_check]int* to, int type);//

    public void ecall_Internal_ElementWiseAdd_InPlace([user_check]float* x, [user_check]float* y, int B, int M, int N);

    public void ecall_Internal_ElementWiseAdd(int from1, int from2, int to_len, [user_check]int* to);//

    public void ecall_Internal_ApplyRotaryPosEmb([user_check]float* q_tensor, [user_check]float* k_tensor,
                                    [user_check]float* cos, [user_check]float* sin,
                                    int B, int Q_M, int K_M, int N, int K);

    public void ecall_Internal_LlamaRotaryEmbedding([user_check]float* inv_freq, int inv_freq_M,
                                    [user_check]float* position_ids,
                                    int position_ids_M, [user_check]float* cos, [user_check]float* sin);

    public void ecall_Internal_Reset();

    public void ecall_Internal_ReplicateTensor_Float(int fromm, [user_check]int* to, int to_len);
    public void ecall_Internal_ReplicateTensor_Int32(int fromm, [user_check]int* to, int to_len);
    public void ecall_Internal_ReplicateTensor_Uint32(int fromm, [user_check]int* to, int to_len);
    public void ecall_Internal_ReplicateTensor_Int8(int fromm, [user_check]int* to, int to_len);

    public void ecall_Internal_GetCprngTensor([user_check]int* out, int shape_len, [user_check]int* shape);

    public void ecall_Internal_SetEncKeyAndDecKey(int layer_idx, [user_check]int* enc_key_pool, [user_check]int* dec_key,
                                int type);
    public void ecall_Internal_SetLinearWeightScales(int layer_idx, [user_check]float* scales, int len,
                                        int type);

    public void ecall_Internal_SetRMSNormWeight(int layer_idx, [user_check]float* weight, float eps,
                                    int type);

    public void ecall_Internal_QuantizeLinearActivation(int layer_idx, int fromm,
                                        int to_len, [user_check]int* to,
                                        int type);//

    public void ecall_Internal_EncryptLinearActivation(int layer_idx, int fromm,
                                            int to_len, [user_check]int* to,
                                            int type);

    public void ecall_Internal_DecryptLinearActivation(int layer_idx, int fromm,
                                            int to_len, [user_check]int* to,
                                            int type);

    public void ecall_Internal_DequantizeLinearActivation(int layer_idx, int fromm,
                                            int to_len, [user_check]int* to,
                                            int type);

    public void ecall_Internal_SetQKVOutputScales(int layer_idx, float q_output_scale,
                                        float k_output_scale, float v_output_scale);

    public void ecall_Internal_QuantizeAndShiftQ(int layer_idx, int fromm, int to_len, [user_check]int* to);

    public void ecall_Internal_QuantizeAndShiftK(int layer_idx, int fromm, int to_len, [user_check]int* to);

    public void ecall_Internal_SetAttentionMask([user_check]float* mask, int M, int N);

    public void ecall_Internal_SetBatchSizeAndTokenLength(int layer_idx, int bsz, int token_length);

    public void ecall_Internal_GenerateSecretKey_QK(int layer_idx);
    public void ecall_Internal_GenerateDecryptionKey_QK(int layer_idx, int from_x, int from_y);
    public void ecall_Internal_GenerateDecAddBuffer_QK(int layer_idx);
    public void ecall_Internal_GenerateDecMultBuffer_QK(int layer_idx);
    public void ecall_Internal_GenerateUnshiftBuffer_QK(int layer_idx);   
   

    public void ecall_Internal_QuantizeQ_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_ShiftQ_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_QuantizeK_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_ShiftK_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_EncryptX_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_EncryptY_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_Decrypt_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_Unshift_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_Dequantize_QK(int layer_idx, int fromm, int to_len, [user_check]int* to);

    public void ecall_Internal_GenerateSecretKey_PV(int layer_idx);
    public void ecall_Internal_GenerateDecryptionKey_PV(int layer_idx, int from_x, int from_y);
    public void ecall_Internal_GenerateDecAddBuffer_PV(int layer_idx);
    public void ecall_Internal_GenerateDecMultBuffer_PV(int layer_idx);
    public void ecall_Internal_GenerateUnshiftBuffer_PV(int layer_idx);

    public void ecall_Internal_QuantizeP_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_ShiftP_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_QuantizeV_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_ShiftV_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_EncryptX_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_EncryptY_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_Decrypt_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_Unshift_PV(int layer_idx, int fromm, int to_len, [user_check]int* to);
    public void ecall_Internal_Dequantize_PV(int layer_idx, int fromm, int to_len, [user_check]int* to); //

    public void ecall_Internal_BookKeeperStore_Float(int loc, [user_check]float* data, int shape_len,
                                        [user_check]int* shape);
    public void ecall_Internal_BookKeeperStore_Int32(int loc, [user_check]int32_t* data, int shape_len,
                                        [user_check]int* shape);
    public void ecall_Internal_BookKeeperStore_Uint32(int loc, [user_check]uint32_t* data, int shape_len,
                                        [user_check]int* shape);
    public void ecall_Internal_BookKeeperStore_Int8(int loc, [user_check]int8_t* data, int shape_len,
                                        [user_check]int* shape);

    public void ecall_Internal_BookKeeperLoad_Float(int loc, [user_check]float* out, int shape_len,
                                        [user_check]int* shape);
    public void ecall_Internal_BookKeeperLoad_Int32(int loc, [user_check]int32_t* out, int shape_len,
                                            [user_check]int* shape);
    public void ecall_Internal_BookKeeperLoad_Uint32(int loc, [user_check]uint32_t* out, int shape_len,
                                                [user_check]int* shape);
    public void ecall_Internal_BookKeeperLoad_Int8(int loc, [user_check]int8_t* out, int shape_len,
                                            [user_check]int* shape);

    public void ecall_Internal_BookKeeperIsAvailable_Float(int loc, [user_check]int* ret);
    public void ecall_Internal_BookKeeperIsAvailable_Int32(int loc, [user_check]int* ret);
    public void ecall_Internal_BookKeeperIsAvailable_Uint32(int loc, [user_check]int* ret);
    public void ecall_Internal_BookKeeperIsAvailable_Int8(int loc, [user_check]int* ret);

    public void ecall_Internal_BookKeeperGetShapeLength_Float(int loc, [user_check]int* ret);
    public void ecall_Internal_BookKeeperGetShapeLength_Int32(int loc, [user_check]int* ret);
    public void ecall_Internal_BookKeeperGetShapeLength_Uint32(int loc, [user_check]int* ret);
    public void ecall_Internal_BookKeeperGetShapeLength_Int8(int loc, [user_check]int* ret);

    public void ecall_Internal_BookKeeperGetShape_Float(int loc, [user_check]int* out);
    public void ecall_Internal_BookKeeperGetShape_Int32(int loc, [user_check]int* out);
    public void ecall_Internal_BookKeeperGetShape_Uint32(int loc, [user_check]int* out);
    public void ecall_Internal_BookKeeperGetShape_Int8(int loc, [user_check]int* out);

    public void ecall_Internal_QKKeyIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_QKDecKeyIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_QKDecAddBufferIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_QKDecMultBufferIsAvailable(int layer_idx, [user_check]int* ret);

    public void ecall_Internal_QKShiftedQIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_QKShiftedKIsAvailable(int layer_idx, [user_check]int* ret);

    public void ecall_Internal_QKUnshiftBufferIsAvailable(int layer_idx, [user_check]int* ret);

    public void ecall_Internal_PVKeyIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_PVDecKeyIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_PVDecAddBufferIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_PVDecMultBufferIsAvailable(int layer_idx, [user_check]int* ret);

    public void ecall_Internal_PVShiftedPIsAvailable(int layer_idx, [user_check]int* ret);
    public void ecall_Internal_PVShiftedVIsAvailable(int layer_idx, [user_check]int* ret);

    public void ecall_Internal_PVUnshiftBufferIsAvailable(int layer_idx, [user_check]int* ret);

    public void ecall_Internal_Matmul_CPU_QK(int layer_idx, int q_from, int k_from,
                                int to_len, [user_check]int* to);
    public void ecall_Internal_Matmul_CPU_PV(int layer_idx, int p_from, int v_from,  
                                int to_len, [user_check]int* to);

    public void ecall_Internal_BookKeeperLoadWithoutReset_Float(int loc, [user_check]float* out);
    public void ecall_Internal_BookKeeperLoadWithoutReset_Int32(int loc, [user_check]int32_t* out);
    public void ecall_Internal_BookKeeperLoadWithoutReset_Uint32(int loc, [user_check]uint32_t* out);
    public void ecall_Internal_BookKeeperLoadWithoutReset_Int8(int loc, [user_check]int8_t* out);
    };

    /*
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
        void ocall_start_clock();
        double ocall_get_time();
        void ocall_end_clock([in, string] const char *str);
    };
};